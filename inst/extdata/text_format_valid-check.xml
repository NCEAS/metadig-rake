<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe ../schemas/schema1.xsd">
  <id>check.text.file.format.valid</id>
  <name>Text file is valid</name>
  <description>Check that a text file is formatted as expected.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>rscript</environment>
  <code><![CDATA[
  library(metarake)
  library(metadig)

 result <- list()
 for (i in seq_along(names)){

  path <- tryCatch({
    mdq_get(url[i])
  },
  error = function(e) {
    e
  })

  if (inherits(path, "error")) {
    result[[i]] <- list(status = "ERROR", output = paste("Something went wrong when trying to download ", names[i]))
    next
  }

  if (!textFormatPresent[i]){
    result[[i]] <- list(status = "SUCCESS", output = paste(names[i], "does not appear to be documented as a text format."))
    next
  }

  status <- check_text_file_parsable(path, fieldDelimiter[i], headerLines[i])

  if (!status){
      result[[i]] <- list(status = "FAILURE", output = paste(names[i], "is formatted incorrectly."))
    } else if (status){
      result[[i]] <- list(status = "SUCCESS", output = paste(names[i], "is formatted correctly."))
  }
}

  statuses <- unlist(lapply(result, function(x){x$status}))
  outputs <- unlist(lapply(result, function(x){x$output}))

  failures <- length(which(statuses == "FAILURE"))
  errors <- length(which(statuses == "ERROR"))
  successes <- length(which(statuses == "SUCCESS"))

  output_string <- paste(successes, "file(s) successfully parsed.",
                       failures, "file(s) failed to parse.",
                       errors, "files(s) errored on download, or are not text files.")

  if (any(statuses == "SUCCESS")){
      mdq_result <- list(output = output_string, status = "SUCCESS")
  } else if (all(statuses == "ERROR")){
      mdq_result <- list(output = output_string, status = "ERROR")
  } else {
      mdq_result <- list(output = output_string, status = "FAILURE")
  }

  ]]></code>
  <selector>
    <name>names</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>url</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./physical/distribution/online/url</xpath>
    </subSelector>
  </selector>
  <selector>
     <name>fieldDelimiter</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/simpleDelimited/fieldDelimiter</xpath>
    </subSelector>
  </selector>
  <selector>
     <name>headerLines</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/numHeaderLines</xpath>
    </subSelector>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
